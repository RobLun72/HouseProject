using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using HouseService.Services;
using HouseService.Data;
using HouseService.Models;
using HouseService.Attributes;

namespace HouseService.Controllers
{
    [ApiController]
    [Route("[controller]")]
    [ApiKeyAuth]
    public class HouseController : ControllerBase
    {
        private readonly HouseDbContext _context;
        private readonly ILogger<HouseController> _logger;
        private readonly IOutboxService _outboxService;

        public HouseController(HouseDbContext context, ILogger<HouseController> logger, IOutboxService outboxService)
        {
            _context = context;
            _logger = logger;
            _outboxService = outboxService;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<House>>> GetHouses()
        {
            return Ok(await _context.Houses.ToListAsync());
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<House>> GetHouse(int id)
        {
            var house = await _context.Houses.FindAsync(id);
            if (house == null)
            {
                return NotFound();
            }
            return Ok(house);
        }

        [HttpPost]
        public async Task<ActionResult<House>> CreateHouse(CreateHouseRequest request)
        {
            if (request == null)
            {
                return BadRequest();
            }

            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var house = new House
                {
                    Name = request.Name,
                    Address = request.Address,
                    Area = request.Area
                    // HouseId will be auto-generated by the database
                };
                
                _context.Houses.Add(house);
                await _context.SaveChangesAsync();
                
                // Create outbox event in the same transaction
                var outboxEvent = _outboxService.CreateHouseCreatedEvent(house.HouseId, house.Name, house.Address, house.Area);
                _context.OutboxEvents.Add(outboxEvent);
                await _context.SaveChangesAsync();
                
                await transaction.CommitAsync();
                
                return CreatedAtAction(nameof(GetHouse), new { id = house.HouseId }, house);
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateHouse(int id, UpdateHouseRequest request)
        {
            if (request == null)
            {
                return BadRequest();
            }

            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var house = await _context.Houses.FindAsync(id);
                if (house == null)
                {
                    return NotFound();
                }

                // Update the house properties from the request
                house.Name = request.Name;
                house.Address = request.Address;
                house.Area = request.Area;

                _context.Entry(house).State = EntityState.Modified;
                await _context.SaveChangesAsync();
                
                // Create outbox event in the same transaction
                var outboxEvent = _outboxService.CreateHouseUpdatedEvent(house.HouseId, house.Name, house.Address, house.Area);
                _context.OutboxEvents.Add(outboxEvent);
                await _context.SaveChangesAsync();
                
                await transaction.CommitAsync();
                return NoContent();
            }
            catch (DbUpdateConcurrencyException)
            {
                await transaction.RollbackAsync();
                if (!await HouseExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteHouse(int id)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var house = await _context.Houses.FindAsync(id);
                if (house == null)
                {
                    return NotFound();
                }

                _context.Houses.Remove(house);
                await _context.SaveChangesAsync();
                
                // Create outbox event in the same transaction
                var outboxEvent = _outboxService.CreateHouseDeletedEvent(id);
                _context.OutboxEvents.Add(outboxEvent);
                await _context.SaveChangesAsync();
                
                await transaction.CommitAsync();
                return NoContent();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        private async Task<bool> HouseExists(int id)
        {
            return await _context.Houses.AnyAsync(e => e.HouseId == id);
        }
    }
}